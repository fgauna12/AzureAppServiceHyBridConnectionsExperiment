# ASP.NET
# Build and test ASP.NET projects.
# Add steps that publish symbols, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/aspnet/build-aspnet-4

trigger:
- master

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  AzureServiceConnection: 'nebbia-partner-service-connection'
  TerraformBackend.ResourceGroup: rg-potatoes-001
  TerraformBackend.StorageAccount: strpotatoestfrm01
  TerraformBackend.ContainerName: test

stages:
- stage: build
  displayName: Build
  jobs: 
  - job: job_buildsolution
    displayName: 'Build solution'
    steps:
    - task: NuGetToolInstaller@1

    - task: NuGetCommand@2
      inputs:
        restoreSolution: '$(solution)'

    - task: VSBuild@1
      inputs:
        solution: '$(solution)'
        msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:PackageLocation="$(build.artifactStagingDirectory)"'
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'

    - task: VSTest@2
      inputs:
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'

    - publish: $(build.artifactStagingDirectory)
      artifact: APIs
      displayName: Publish APIs
- stage: test
  dependsOn: ['build']
  displayName: Test
  jobs: 
  - job: job_test_iac
    displayName: 'Deploy IaC'
    pool:
      vmImage: 'ubuntu-latest'
    variables:
      TF_VAR_app_name: 'potatoes'
      TF_VAR_environment: 'test'
      TF_VAR_location: 'eastus'
      TF_VAR_admin_username: 'adminuser'
    steps:
    - task: AzureCLI@2
      displayName: "Azure Terraform Backend"
      inputs:
        azureSubscription: $(AzureServiceConnection)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az group create --location eastus --name $(TerraformBackend.ResourceGroup)
          
          az storage account create --name $(TerraformBackend.StorageAccount) --resource-group $(TerraformBackend.ResourceGroup) --location eastus --sku Standard_LRS
          
          az storage container create --name $(TerraformBackend.ContainerName) --account-name $(TerraformBackend.StorageAccount)

          STORAGE_ACCOUNT_KEY=$(az storage account keys list -g $(TerraformBackend.ResourceGroup) -n $(TerraformBackend.StorageAccount) | jq ".[0].value" -r)

          echo "setting storage account key variable"
          echo "##vso[task.setvariable variable=ARM_ACCESS_KEY;issecret=true]$STORAGE_ACCOUNT_KEY"

    - task: TerraformInstaller@0
      inputs:
        terraformVersion: '0.12.20'
    
    - task: AzureCLI@2
      displayName: "Terraform Init"
      inputs:
        azureSubscription: $(AzureServiceConnection)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          terraform init

          echo "planning"
          terraform plan -o tf.plan

          echo "applying"
          terraform apply tf.plan
      workingDirectory: ./iac/

    # - task: TerraformTaskV1@0
    #   displayName: "Terraform Init"
    #   inputs:
    #     provider: 'azurerm'
    #     command: 'init'
    #     backendServiceArm: $(AzureServiceConnection)
    #     backendAzureRmResourceGroupName: $(TerraformBackend.ResourceGroup)
    #     backendAzureRmStorageAccountName: $(TerraformBackend.StorageAccount)
    #     backendAzureRmContainerName: '$(TerraformBackend.ContainerName)'
    #     backendAzureRmKey: 'infrastructure/terraform.tfstate'
    #     workingDirectory: '$(System.DefaultWorkingDirectory)/iac/'

    # - task: TerraformTaskV1@0
    #   displayName: "Terraform Plan"
    #   inputs:
    #     provider: 'azurerm'
    #     command: 'plan'
    #     workingDirectory: '$(System.DefaultWorkingDirectory)/iac/'
    #     environmentServiceNameAzureRM: $(AzureServiceConnection)
    #     commandOptions: ""

    # - task: TerraformTaskV1@0
    #   displayName: "Terraform Apply"
    #   name:  TerraformApply
    #   inputs:
    #     provider: 'azurerm'
    #     command: 'apply'
    #     workingDirectory: '$(System.DefaultWorkingDirectory)/iac/'
    #     environmentServiceNameAzureRM: $(AzureServiceConnection)
    #     commandOptions: ""
